{"version":3,"sources":["components/Explore.js","App.js","serviceWorker.js","index.js"],"names":["img","width","height","maxWidth","label_style","fontWeight","fontFamily","ImageRow","colorLabels","label_list","label_color_map","map","label","rand_color","randomColor","luminosity","format","react_default","a","createElement","style","Object","objectSpread","color","colorCaptions","captions","caption","String","prototype","replaceAll","search","replacement","this","replace","RegExp","new_caption","entries","forEach","_ref","_ref2","slicedToArray","key","value","concat","toLowerCase","label_column","props","annotations","ann","unique_label_list","toConsumableArray","Set","_this$colorLabels","_this$colorLabels2","caption_list","dangerouslySetInnerHTML","__html","Grid","container","spacing","item","xs","src","url","alt","in-domain","near-domain","out-domain","domain","Divider","light","Component","Explore","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shuffle","i","length","j","Math","floor","random","_ref3","fetchData","axios","get","then","response","setState","data","catch","error","console","log","renderRows","table","state","page","final_idx","min","pageLength","image_data","push","hasMoreItems","loader","className","items","Explore_ImageRow","Container","fixed","paddingTop","fontSize","react_infinite_scroller_default","pageStart","loadMore","hasMore","App","MuiThemeProvider","position","Typography","components_Explore","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b1c4dcf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport randomColor from 'randomcolor'\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n\nconst img = {\n  width: '100%',\n  height: 'auto',\n  maxWidth: '100%',\n}\n\nconst label_style = {\n  fontWeight:700, \n  fontFamily:\"Inconsolata\"\n}\n\nclass ImageRow extends Component {\n\n  colorLabels = (label_list) => {\n    let label_color_map = {};\n    label_list = label_list.map((label)=> {\n        let rand_color = randomColor({luminosity: 'dark', format: 'rgb'});\n        label_color_map[label] = rand_color;\n        return (<p><span style={{color: rand_color, ...label_style}}>{label}</span></p>);\n      }\n    )\n    return [label_color_map, label_list];\n  }\n\n  colorCaptions = (captions, label_list) => {\n    let new_captions = captions.map((caption)=> {\n      String.prototype.replaceAll = function(search, replacement) {\n        var target = this;\n        return target.replace(new RegExp(search, 'i'), replacement);\n      };\n\n      let new_caption = caption;\n      \n      Object.entries(label_list).forEach(\n        ([key, value]) => {\n          new_caption = new_caption.replaceAll(key, `<span style=\"color:${value}; font-weight:700; font-family:Inconsolata\">${key.toLowerCase()}</span>`);\n        }\n      );\n      return new_caption;\n    });\n\n    return new_captions;\n  }\n\n  render() {\n    const label_list = this.props.annotations.map((ann) => ann.label)\n    let unique_label_list = [...new Set(label_list)];\n    var label_column;\n\n    [unique_label_list, label_column] = this.colorLabels(unique_label_list);\n    \n    let color_captions = this.colorCaptions(this.props.captions, unique_label_list);\n\n    const caption_list = color_captions.map((caption) => <p dangerouslySetInnerHTML={{__html: caption}} />)\n    \n    // console.log(unique_label_list)\n    // unique_label_list = Object.entries(unique_label_list).forEach(\n    //   ([key, value]) => <p><span style={{\"color\": value}}>{key}</span></p>\n    // );\n\n    // unique_label_list = unique_label_list.map((label)=> <p><span>{label}</span></p>)\n    const domain_map = {\n      'in-domain': 'in-domain',\n      'near-domain': 'near-domain',\n      'out-domain': 'out-of-domain'\n    };\n    \n    return (\n      <Grid container spacing={4}>\n        <Grid item xs={4}><img src={this.props.url} style={img} alt={this.props.url}></img></Grid>\n        <Grid item xs={4}>{caption_list}</Grid>\n        <Grid item xs={2}>{label_column}</Grid>\n        <Grid item xs={2}><p style={label_style}>{domain_map[this.props.domain]}</p></Grid>\n        <Divider light />\n      </Grid>\n    );\n  }\n}\n\nclass Explore extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      page: 0,\n      table: [],\n      hasMoreItems: true\n    };\n\n    this.pageLength = 10;\n  }\n\n  shuffle = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n \n  fetchData = () => {\n    axios.get(\"https://s3.amazonaws.com/nocaps/nocaps_explore_val_data.json\")\n    .then((response)  => {\n      this.setState({data: this.shuffle(response.data)});\n      // this.renderRows();\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n  }\n  \n  renderRows = () => {\n    let table = this.state.table;\n    let page = this.state.page;\n\n    if (this.state.data) {\n      // Outer loop to create parent\n      const final_idx = Math.min((page + 1) * this.pageLength, this.state.data.length);\n      for (let i = page * this.pageLength; i < final_idx ; i++) {\n        var image_data = this.state.data[i];\n        table.push(image_data);\n      }\n      \n      this.setState({\n        table: table,\n        page: page + 1,\n        hasMoreItems: final_idx < this.state.data.length ? true : false\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  render() {\n    const loader = <div className=\"loader\">Loading ...</div>;\n    var items = [];\n    this.state.table.map((image_data, i) => {\n        items.push(\n          <ImageRow url={image_data.url} captions={image_data.captions} annotations={image_data.annotations} domain={image_data.domain}/>\n        );\n    });\n\n    return (\n      <Container fixed maxWidth=\"lg\">\n        <Grid container spacing={4} style={{paddingTop: \"10px\", fontWeight: 600, fontSize:20}}>\n          <Grid item xs={4}>Image</Grid>\n          <Grid item xs={4}>Reference Captions</Grid>\n          <Grid item xs={2}>Object Classes</Grid>\n          <Grid item xs={2}>Domain</Grid>\n          <Divider/>\n        </Grid>\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={this.renderRows}\n          hasMore={this.state.hasMoreItems}\n          loader={loader}>\n            {items}\n        </InfiniteScroll>   \n      </Container>\n         \n    );\n  }\n}\n\nexport default Explore;\n","// Copyright (c) Facebook, Inc. and its affiliates.\nimport React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography'\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Explore from './components/Explore';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <Container fixed maxWidth=\"lg\" position=\"static\" color=\"default\">\n          <Typography  color=\"inherit\" style={{fontSize:24, fontWeight:400}}>\n          Validation Set Examples\n          </Typography>\n      </Container>\n        <div className=\"App\">\n            <Explore/>\n          </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// Copyright (c) Facebook, Inc. and its affiliates.\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Copyright (c) Facebook, Inc. and its affiliates.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}